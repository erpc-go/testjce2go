// DO NOT EDIT IT.
// code generated by jce2go v1.0.
// source: base.jce
package base

import (
	"fmt"
	"io"

	"github.com/erpc-go/jce-codec"
)

// 占位使用，避免导入的这些包没有被使用
var _ = fmt.Errorf
var _ = io.ReadFull
var _ = jce.Int1

// enum Code implement
type Code int32

const (
	CodeSuccess Code = 0
	CodeError   Code = 1
)

// const implement
const (
	ERPC_VERSION int16 = 0x01
	TUP_VERSION  int32 = 0x03
)

// Message struct implement
type Message struct {
	StrTitle     string `json:"strTitle" tag:"0"`
	StrBody      string `json:"strBody" tag:"1"`
	StrPayload   string `json:"strPayload" tag:"2"`
	StrChannelId string `json:"strChannelId" tag:"3"`
	IBadge       int32  `json:"iBadge" tag:"4"`
	StrImage     string `json:"strImage" tag:"5"`
	INotifyId    int32  `json:"iNotifyId" tag:"6"`
}

func (st *Message) resetDefault() {
}

// ReadFrom reads from io.Reader and put into struct.
func (st *Message) ReadFrom(r io.Reader) (n int64, err error) {
	var (
		have bool
		ty   jce.JceEncodeType
	)

	decoder := jce.NewDecoder(r)
	st.resetDefault()

	if err = decoder.ReadStructBegin(); err != nil {
		return
	}

	// [step 0] read StrTitle
	if err = decoder.ReadString(&st.StrTitle, 0, false); err != nil {
		return
	}
	// [step 1] read StrBody
	if err = decoder.ReadString(&st.StrBody, 1, false); err != nil {
		return
	}
	// [step 2] read StrPayload
	if err = decoder.ReadString(&st.StrPayload, 2, false); err != nil {
		return
	}
	// [step 3] read StrChannelId
	if err = decoder.ReadString(&st.StrChannelId, 3, false); err != nil {
		return
	}
	// [step 4] read IBadge
	if err = decoder.ReadInt32(&st.IBadge, 4, false); err != nil {
		return
	}
	// [step 5] read StrImage
	if err = decoder.ReadString(&st.StrImage, 5, false); err != nil {
		return
	}
	// [step 6] read INotifyId
	if err = decoder.ReadInt32(&st.INotifyId, 6, false); err != nil {
		return
	}

	if err = decoder.ReadStructEnd(); err != nil {
		return
	}

	_ = err
	_ = have
	_ = ty
	return
}

// WriteTo encode struct to io.Writer
func (st *Message) WriteTo(w io.Writer) (n int64, err error) {
	encoder := jce.NewEncoder(w)
	st.resetDefault()

	if err = encoder.WriteStructBegin(); err != nil {
		return
	}

	// [step 0] write StrTitle
	if err = encoder.WriteString(st.StrTitle, 0); err != nil {
		return
	}
	// [step 1] write StrBody
	if err = encoder.WriteString(st.StrBody, 1); err != nil {
		return
	}
	// [step 2] write StrPayload
	if err = encoder.WriteString(st.StrPayload, 2); err != nil {
		return
	}
	// [step 3] write StrChannelId
	if err = encoder.WriteString(st.StrChannelId, 3); err != nil {
		return
	}
	// [step 4] write IBadge
	if err = encoder.WriteInt32(st.IBadge, 4); err != nil {
		return
	}
	// [step 5] write StrImage
	if err = encoder.WriteString(st.StrImage, 5); err != nil {
		return
	}
	// [step 6] write INotifyId
	if err = encoder.WriteInt32(st.INotifyId, 6); err != nil {
		return
	}

	if err = encoder.WriteStructEnd(); err != nil {
		return
	}

	// flush to io.Writer
	err = encoder.Flush()
	return
}

// AndroidReq struct implement
type AndroidReq struct {
	IAppid       int32   `json:"iAppid" tag:"0"`
	StrMessageId string  `json:"strMessageId" tag:"1"`
	StrToken     string  `json:"strToken" tag:"2"`
	StMessage    Message `json:"stMessage" tag:"3"`
}

func (st *AndroidReq) resetDefault() {
}

// ReadFrom reads from io.Reader and put into struct.
func (st *AndroidReq) ReadFrom(r io.Reader) (n int64, err error) {
	var (
		have bool
		ty   jce.JceEncodeType
	)

	decoder := jce.NewDecoder(r)
	st.resetDefault()

	if err = decoder.ReadStructBegin(); err != nil {
		return
	}

	// [step 0] read IAppid
	if err = decoder.ReadInt32(&st.IAppid, 0, false); err != nil {
		return
	}
	// [step 1] read StrMessageId
	if err = decoder.ReadString(&st.StrMessageId, 1, false); err != nil {
		return
	}
	// [step 2] read StrToken
	if err = decoder.ReadString(&st.StrToken, 2, false); err != nil {
		return
	}
	// [step 3] read StMessage
	if _, err = st.StMessage.ReadFrom(decoder.Reader()); err != nil {
		return
	}

	if err = decoder.ReadStructEnd(); err != nil {
		return
	}

	_ = err
	_ = have
	_ = ty
	return
}

// WriteTo encode struct to io.Writer
func (st *AndroidReq) WriteTo(w io.Writer) (n int64, err error) {
	encoder := jce.NewEncoder(w)
	st.resetDefault()

	if err = encoder.WriteStructBegin(); err != nil {
		return
	}

	// [step 0] write IAppid
	if err = encoder.WriteInt32(st.IAppid, 0); err != nil {
		return
	}
	// [step 1] write StrMessageId
	if err = encoder.WriteString(st.StrMessageId, 1); err != nil {
		return
	}
	// [step 2] write StrToken
	if err = encoder.WriteString(st.StrToken, 2); err != nil {
		return
	}
	// [step 3] write StMessage
	if _, err = st.StMessage.WriteTo(encoder.Writer()); err != nil {
		return
	}

	if err = encoder.WriteStructEnd(); err != nil {
		return
	}

	// flush to io.Writer
	err = encoder.Flush()
	return
}

// AndroidRsp struct implement
type AndroidRsp struct {
	IResult         int32  `json:"iResult" tag:"0"`
	IFactoryRspCode int32  `json:"iFactoryRspCode" tag:"1"`
	StrFactoryRspId string `json:"strFactoryRspId" tag:"2"`
}

func (st *AndroidRsp) resetDefault() {
}

// ReadFrom reads from io.Reader and put into struct.
func (st *AndroidRsp) ReadFrom(r io.Reader) (n int64, err error) {
	var (
		have bool
		ty   jce.JceEncodeType
	)

	decoder := jce.NewDecoder(r)
	st.resetDefault()

	if err = decoder.ReadStructBegin(); err != nil {
		return
	}

	// [step 0] read IResult
	if err = decoder.ReadInt32(&st.IResult, 0, false); err != nil {
		return
	}
	// [step 1] read IFactoryRspCode
	if err = decoder.ReadInt32(&st.IFactoryRspCode, 1, false); err != nil {
		return
	}
	// [step 2] read StrFactoryRspId
	if err = decoder.ReadString(&st.StrFactoryRspId, 2, false); err != nil {
		return
	}

	if err = decoder.ReadStructEnd(); err != nil {
		return
	}

	_ = err
	_ = have
	_ = ty
	return
}

// WriteTo encode struct to io.Writer
func (st *AndroidRsp) WriteTo(w io.Writer) (n int64, err error) {
	encoder := jce.NewEncoder(w)
	st.resetDefault()

	if err = encoder.WriteStructBegin(); err != nil {
		return
	}

	// [step 0] write IResult
	if err = encoder.WriteInt32(st.IResult, 0); err != nil {
		return
	}
	// [step 1] write IFactoryRspCode
	if err = encoder.WriteInt32(st.IFactoryRspCode, 1); err != nil {
		return
	}
	// [step 2] write StrFactoryRspId
	if err = encoder.WriteString(st.StrFactoryRspId, 2); err != nil {
		return
	}

	if err = encoder.WriteStructEnd(); err != nil {
		return
	}

	// flush to io.Writer
	err = encoder.Flush()
	return
}
